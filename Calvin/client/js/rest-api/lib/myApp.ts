/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { MyAppContext } from "./myAppContext";

class MyApp extends MyAppContext {
  /**
   * Initializes a new instance of the MyApp class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.MyAppOptions) {
    super(options);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.GetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string[]>, callback?: msRest.ServiceCallback<string[]>): Promise<Models.GetResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.GetResponse>;
  }

  /**
   * @param model
   * @param [options] The optional parameters
   * @returns Promise<Models.PostResponse>
   */
  post(model: Models.RegisterApiRequestModel, options?: msRest.RequestOptionsBase): Promise<Models.PostResponse>;
  /**
   * @param model
   * @param callback The callback
   */
  post(model: Models.RegisterApiRequestModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param model
   * @param options The optional parameters
   * @param callback The callback
   */
  post(model: Models.RegisterApiRequestModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  post(model: Models.RegisterApiRequestModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.PostResponse> {
    return this.sendOperationRequest(
      {
        model,
        options
      },
      postOperationSpec,
      callback) as Promise<Models.PostResponse>;
  }

  /**
   * @param id
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateResponse>
   */
  update(id: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.UpdateResponse>;
  /**
   * @param id
   * @param name
   * @param callback The callback
   */
  update(id: string, name: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param id
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  update(id: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  update(id: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.UpdateResponse> {
    return this.sendOperationRequest(
      {
        id,
        name,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.UpdateResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteMethodResponse>
   */
  deleteMethod(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteMethodResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteMethod(id: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  deleteMethod(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.DeleteMethodResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.DeleteMethodResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/value",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const postOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/value",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.RegisterApiRequestModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {}
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/value/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "name",
    mapper: {
      required: true,
      serializedName: "name",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/value/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {}
  },
  serializer
};

export {
  MyApp,
  MyAppContext,
  Models as MyAppModels,
  Mappers as MyAppMappers
};
